<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd"
         version="1.8.17">
    <compounddef id="log_8c" kind="file" language="C++">
        <compoundname>log.c</compoundname>
        <includes local="no">stdio.h</includes>
        <includes local="no">stdlib.h</includes>
        <includes local="no">stdarg.h</includes>
        <includes local="no">string.h</includes>
        <includes local="no">time.h</includes>
        <includes refid="log_8h" local="yes">../log.h</includes>
        <incdepgraph>
            <node id="4">
                <label>stdarg.h</label>
            </node>
            <node id="3">
                <label>stdlib.h</label>
            </node>
            <node id="5">
                <label>string.h</label>
            </node>
            <node id="1">
                <label>log/src/log.c</label>
                <link refid="log_8c"/>
                <childnode refid="2" relation="include">
                </childnode>
                <childnode refid="3" relation="include">
                </childnode>
                <childnode refid="4" relation="include">
                </childnode>
                <childnode refid="5" relation="include">
                </childnode>
                <childnode refid="6" relation="include">
                </childnode>
                <childnode refid="7" relation="include">
                </childnode>
            </node>
            <node id="6">
                <label>time.h</label>
            </node>
            <node id="7">
                <label>../log.h</label>
                <link refid="log_8h_source"/>
                <childnode refid="2" relation="include">
                </childnode>
                <childnode refid="4" relation="include">
                </childnode>
            </node>
            <node id="2">
                <label>stdio.h</label>
            </node>
        </incdepgraph>
        <sectiondef kind="var">
            <memberdef kind="variable" id="log_8c_1a697ce711b67313990d351b5c95f87aed" prot="public" static="no"
                       mutable="no">
                <type>void *</type>
                <definition>void* udata</definition>
                <argsstring></argsstring>
                <name>udata</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="33" column="8" bodyfile="log/src/log.c" bodystart="33"
                          bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="log_8c_1a9863926e23e26ddb194b82b7fc50756a" prot="public" static="no"
                       mutable="no">
                <type>log_LockFn</type>
                <definition>static void lock</definition>
                <argsstring></argsstring>
                <name>lock</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="34" column="14" bodyfile="log/src/log.c" bodystart="34"
                          bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="log_8c_1aa065f30aa9f5f9a42132c82c787ee70b" prot="public" static="no"
                       mutable="no">
                <type>FILE *</type>
                <definition>FILE* fp</definition>
                <argsstring></argsstring>
                <name>fp</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="35" column="8" bodyfile="log/src/log.c" bodystart="35"
                          bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="log_8c_1acf4d33ee4cff36f69b924471174dcb11" prot="public" static="no"
                       mutable="no">
                <type>int</type>
                <definition>int level</definition>
                <argsstring></argsstring>
                <name>level</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="36" column="7" bodyfile="log/src/log.c" bodystart="36"
                          bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="log_8c_1a55602ca214fb365e8deef9a73c8442e7" prot="public" static="no"
                       mutable="no">
                <type>int</type>
                <definition>int quiet</definition>
                <argsstring></argsstring>
                <name>quiet</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="37" column="7" bodyfile="log/src/log.c" bodystart="37"
                          bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="log_8c_1a06bc9fdc1bb40c3434e1a59de7576632" prot="public" static="no"
                       mutable="no">
                <type>int</type>
                <definition>int date</definition>
                <argsstring></argsstring>
                <name>date</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="38" column="7" bodyfile="log/src/log.c" bodystart="38"
                          bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="log_8c_1ae22014135947d124b2b1eda801ded038" prot="public" static="no"
                       mutable="no">
                <type>int</type>
                <definition>int specs</definition>
                <argsstring></argsstring>
                <name>specs</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="39" column="7" bodyfile="log/src/log.c" bodystart="39"
                          bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="log_8c_1a32afcca366c50561cf80f8df68a4e552" prot="public" static="yes"
                       mutable="no">
                <type>struct @1</type>
                <definition>struct @1 L</definition>
                <argsstring></argsstring>
                <name>L</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="40" column="3"/>
            </memberdef>
            <memberdef kind="variable" id="log_8c_1a6ee99f12766d97f932da55d2232f5cf5" prot="public" static="yes"
                       mutable="no">
                <type>const char *</type>
                <definition>const char* level_names[]</definition>
                <argsstring>[]</argsstring>
                <name>level_names</name>
                <initializer>= {
                    &quot;TRACE&quot;, &quot;DEBUG&quot;, &quot;INFO&quot;, &quot;WARN&quot;, &quot;ERROR&quot;, &quot;FATAL&quot;}
                </initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="42" column="19" bodyfile="log/src/log.c" bodystart="42"
                          bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="func">
            <memberdef kind="function" id="log_8c_1abb7cc7eb4e959fda6a43c8dd85f20090" prot="public" static="yes"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>static void unlock</definition>
                <argsstring>(void)</argsstring>
                <name>unlock</name>
                <param>
                    <type>void</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="58" column="13" bodyfile="log/src/log.c" bodystart="58"
                          bodyend="64"/>
            </memberdef>
            <memberdef kind="function" id="log_8c_1a670c547ace6683148e5f480c4fc4c0f0" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void log_set_udata</definition>
                <argsstring>(void *udata)</argsstring>
                <name>log_set_udata</name>
                <param>
                    <type>void *</type>
                    <declname>udata</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="66" column="6" bodyfile="log/src/log.c" bodystart="66"
                          bodyend="69"/>
            </memberdef>
            <memberdef kind="function" id="log_8c_1a93d6674a530b372c85e6bdf275e6e6b4" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void log_set_lock</definition>
                <argsstring>(log_LockFn fn)</argsstring>
                <name>log_set_lock</name>
                <param>
                    <type>log_LockFn</type>
                    <declname>fn</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="71" column="6" bodyfile="log/src/log.c" bodystart="71"
                          bodyend="74"/>
            </memberdef>
            <memberdef kind="function" id="log_8c_1af0f33363d4098787cac5b47f0a6ad443" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void log_set_fp</definition>
                <argsstring>(FILE *fp)</argsstring>
                <name>log_set_fp</name>
                <param>
                    <type>FILE *</type>
                    <declname>fp</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="76" column="6" bodyfile="log/src/log.c" bodystart="76"
                          bodyend="79"/>
            </memberdef>
            <memberdef kind="function" id="log_8c_1af2493e94f152a28b2ba4e3a2e2bba65d" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void log_set_level</definition>
                <argsstring>(int level)</argsstring>
                <name>log_set_level</name>
                <param>
                    <type>int</type>
                    <declname>level</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="81" column="6" bodyfile="log/src/log.c" bodystart="81"
                          bodyend="84"/>
            </memberdef>
            <memberdef kind="function" id="log_8c_1a15fc2e61d925edc83d6eaa748a7fb40c" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void log_set_quiet</definition>
                <argsstring>(int enable)</argsstring>
                <name>log_set_quiet</name>
                <param>
                    <type>int</type>
                    <declname>enable</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="86" column="6" bodyfile="log/src/log.c" bodystart="86"
                          bodyend="89"/>
            </memberdef>
            <memberdef kind="function" id="log_8c_1a4997d5e10e9467049e1a62f750746acd" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void log_set_date</definition>
                <argsstring>(int enable)</argsstring>
                <name>log_set_date</name>
                <param>
                    <type>int</type>
                    <declname>enable</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="91" column="6" bodyfile="log/src/log.c" bodystart="91"
                          bodyend="94"/>
            </memberdef>
            <memberdef kind="function" id="log_8c_1ae8e87b2a5ff4addb8e1f2e741d1c50b8" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void log_set_specs</definition>
                <argsstring>(int enable)</argsstring>
                <name>log_set_specs</name>
                <param>
                    <type>int</type>
                    <declname>enable</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="96" column="6" bodyfile="log/src/log.c" bodystart="96"
                          bodyend="99"/>
            </memberdef>
            <memberdef kind="function" id="log_8c_1ac008ecbde449b2dd1bc4f8671d9a0e07" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void log_log</definition>
                <argsstring>(int level, const char *file, int line, const char *fmt,...)</argsstring>
                <name>log_log</name>
                <param>
                    <type>int</type>
                    <declname>level</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>file</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>line</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>fmt</declname>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="log/src/log.c" line="101" column="6" bodyfile="log/src/log.c" bodystart="101"
                          bodyend="177"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <programlisting>
            <codeline lineno="1">
                <highlight class="comment">/*</highlight>
            </codeline>
            <codeline lineno="2">
                <highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>rxi
                </highlight>
            </codeline>
            <codeline lineno="3">
                <highlight class="comment"><sp/>*
                </highlight>
            </codeline>
            <codeline lineno="4">
                <highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>
                    charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy
                </highlight>
            </codeline>
            <codeline lineno="5">
                <highlight class="comment"><sp/>*<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation
                    <sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to
                </highlight>
            </codeline>
            <codeline lineno="6">
                <highlight class="comment"><sp/>*<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>
                    including<sp/>without<sp/>limitation<sp/>the
                </highlight>
            </codeline>
            <codeline lineno="7">
                <highlight class="comment"><sp/>*<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>
                    publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or
                </highlight>
            </codeline>
            <codeline lineno="8">
                <highlight class="comment"><sp/>*<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>
                    permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is
                </highlight>
            </codeline>
            <codeline lineno="9">
                <highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>
                    following<sp/>conditions:
                </highlight>
            </codeline>
            <codeline lineno="10">
                <highlight class="comment"><sp/>*
                </highlight>
            </codeline>
            <codeline lineno="11">
                <highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>
                    permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in
                </highlight>
            </codeline>
            <codeline lineno="12">
                <highlight class="comment"><sp/>*<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the
                    <sp/>Software.
                </highlight>
            </codeline>
            <codeline lineno="13">
                <highlight class="comment"><sp/>*
                </highlight>
            </codeline>
            <codeline lineno="14">
                <highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,
                    <sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR
                </highlight>
            </codeline>
            <codeline lineno="15">
                <highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE
                    <sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,
                </highlight>
            </codeline>
            <codeline lineno="16">
                <highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>
                    NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE
                </highlight>
            </codeline>
            <codeline lineno="17">
                <highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR
                    <sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER
                </highlight>
            </codeline>
            <codeline lineno="18">
                <highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>
                    CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING
                </highlight>
            </codeline>
            <codeline lineno="19">
                <highlight class="comment"><sp/>*<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE
                    <sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS
                </highlight>
            </codeline>
            <codeline lineno="20">
                <highlight class="comment"><sp/>*<sp/>IN<sp/>THE<sp/>SOFTWARE.
                </highlight>
            </codeline>
            <codeline lineno="21">
                <highlight class="comment"><sp/>*/
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="22">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="23">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="24">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="25">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="26">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;string.h&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="27">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;time.h&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="28">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="29">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&quot;../log.h&quot;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="30">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="31">
                <highlight class="normal"></highlight>
                <highlight class="keyword">static</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">struct</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="32">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="33">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*udata;
                </highlight>
            </codeline>
            <codeline lineno="34">
                <highlight class="normal">
                    <sp/>
                    <sp/>log_LockFn<sp/>lock;
                </highlight>
            </codeline>
            <codeline lineno="35">
                <highlight class="normal">
                    <sp/>
                    <sp/>FILE<sp/>*fp;
                </highlight>
            </codeline>
            <codeline lineno="36">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>level;
                </highlight>
            </codeline>
            <codeline lineno="37">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>quiet;
                </highlight>
            </codeline>
            <codeline lineno="38">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>date;
                </highlight>
            </codeline>
            <codeline lineno="39">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>specs;
                </highlight>
            </codeline>
            <codeline lineno="40">
                <highlight class="normal">}<sp/>L;
                </highlight>
            </codeline>
            <codeline lineno="41">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="42">
                <highlight class="normal"></highlight>
                <highlight class="keyword">static</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="normal"><sp/>*level_names[]<sp/>=<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="43">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;TRACE&quot;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;DEBUG&quot;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;INFO&quot;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;WARN&quot;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;ERROR&quot;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;FATAL&quot;</highlight>
                <highlight class="normal">};</highlight>
            </codeline>
            <codeline lineno="44">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="45">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifdef<sp/>LOG_USE_COLOR
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="46">
                <highlight class="normal"></highlight>
                <highlight class="keyword">static</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="normal"><sp/>*level_colors[]<sp/>=<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="47">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\x1b[94m&quot;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\x1b[36m&quot;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\x1b[32m&quot;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\x1b[33m&quot;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\x1b[31m&quot;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\x1b[35m&quot;</highlight>
                <highlight class="normal">};</highlight>
            </codeline>
            <codeline lineno="48">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="49">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="50">
                <highlight class="normal"></highlight>
                <highlight class="keyword">static</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>lock(
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">)</highlight>
            </codeline>
            <codeline lineno="51">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="52">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(L.lock)
                </highlight>
            </codeline>
            <codeline lineno="53">
                <highlight class="normal">
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="54">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>L.lock(L.udata,<sp/>1);
                </highlight>
            </codeline>
            <codeline lineno="55">
                <highlight class="normal">
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="56">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="57">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="58">
                <highlight class="normal"></highlight>
                <highlight class="keyword">static</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>unlock(
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">)</highlight>
            </codeline>
            <codeline lineno="59">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="60">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(L.lock)
                </highlight>
            </codeline>
            <codeline lineno="61">
                <highlight class="normal">
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="62">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>L.lock(L.udata,<sp/>0);
                </highlight>
            </codeline>
            <codeline lineno="63">
                <highlight class="normal">
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="64">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="65">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="66">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>log_set_udata(
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*udata)
                </highlight>
            </codeline>
            <codeline lineno="67">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="68">
                <highlight class="normal">
                    <sp/>
                    <sp/>L.udata<sp/>=<sp/>udata;
                </highlight>
            </codeline>
            <codeline lineno="69">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="70">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="71">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>log_set_lock(log_LockFn<sp/>fn)
                </highlight>
            </codeline>
            <codeline lineno="72">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="73">
                <highlight class="normal">
                    <sp/>
                    <sp/>L.lock<sp/>=<sp/>fn;
                </highlight>
            </codeline>
            <codeline lineno="74">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="75">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="76">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>log_set_fp(FILE<sp/>*fp)
                </highlight>
            </codeline>
            <codeline lineno="77">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="78">
                <highlight class="normal">
                    <sp/>
                    <sp/>L.fp<sp/>=<sp/>fp;
                </highlight>
            </codeline>
            <codeline lineno="79">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="80">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="81">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>log_set_level(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>level)
                </highlight>
            </codeline>
            <codeline lineno="82">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="83">
                <highlight class="normal">
                    <sp/>
                    <sp/>L.level<sp/>=<sp/>level;
                </highlight>
            </codeline>
            <codeline lineno="84">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="85">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="86">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>log_set_quiet(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>enable)
                </highlight>
            </codeline>
            <codeline lineno="87">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="88">
                <highlight class="normal">
                    <sp/>
                    <sp/>L.quiet<sp/>=<sp/>enable<sp/>?<sp/>1<sp/>:<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="89">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="90">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="91">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>log_set_date(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>enable)
                </highlight>
            </codeline>
            <codeline lineno="92">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="93">
                <highlight class="normal">
                    <sp/>
                    <sp/>L.date<sp/>=<sp/>enable<sp/>?<sp/>1<sp/>:<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="94">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="95">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="96">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>log_set_specs(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>enable)
                </highlight>
            </codeline>
            <codeline lineno="97">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="98">
                <highlight class="normal">
                    <sp/>
                    <sp/>L.specs<sp/>=<sp/>enable<sp/>?<sp/>1<sp/>:<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="99">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="100">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="101">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>log_log(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>level,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="normal"><sp/>*file,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>line,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="normal"><sp/>*fmt,<sp/>...)
                </highlight>
            </codeline>
            <codeline lineno="102">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="103">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">/*<sp/>Acquire<sp/>lock<sp/>*/
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="104">
                <highlight class="normal">
                    <sp/>
                    <sp/>lock();
                </highlight>
            </codeline>
            <codeline lineno="105">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="106">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">/*<sp/>Get<sp/>current<sp/>time<sp/>*/
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="107">
                <highlight class="normal">
                    <sp/>
                    <sp/>time_t<sp/>t<sp/>=<sp/>time(NULL);
                </highlight>
            </codeline>
            <codeline lineno="108">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">struct
                    <sp/>
                </highlight>
                <highlight class="normal">tm<sp/>*lt<sp/>=<sp/>localtime(&amp;t);
                </highlight>
            </codeline>
            <codeline lineno="109">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="110">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">/*<sp/>Log<sp/>to<sp/>stderr<sp/>*/
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="111">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!L.quiet<sp/>&amp;&amp;<sp/>level<sp/>&gt;=<sp/>L.level)
                </highlight>
            </codeline>
            <codeline lineno="112">
                <highlight class="normal">
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="113">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>va_list<sp/>args;
                </highlight>
            </codeline>
            <codeline lineno="114">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="normal"><sp/>buf[16];
                </highlight>
            </codeline>
            <codeline lineno="115">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>buf[strftime(buf,
                    <sp/>
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(buf),
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;%H:%M:%S&quot;</highlight>
                <highlight class="normal">,<sp/>lt)]<sp/>=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;\0&apos;</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="116">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifdef<sp/>LOG_USE_COLOR
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="117">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(L.date<sp/>&amp;&amp;<sp/>L.specs)
                </highlight>
            </codeline>
            <codeline lineno="118">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="119">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>fprintf(
                </highlight>
            </codeline>
            <codeline lineno="120">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>stderr,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;%s<sp/>%s%-5s\x1b[0m<sp/>\x1b[90m%s:%d:\x1b[0m<sp/>&quot;
                </highlight>
                <highlight class="normal">,</highlight>
            </codeline>
            <codeline lineno="121">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>buf,<sp/>level_colors[level],<sp/>level_names[level],<sp/>file,<sp/>line);
                </highlight>
            </codeline>
            <codeline lineno="122">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="123">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(L.date<sp/>&amp;&amp;<sp/>!L.specs)
                </highlight>
            </codeline>
            <codeline lineno="124">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="125">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>fprintf(stderr,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;%s<sp/>%s%-5s\x1b[0m<sp/>\x1b[90m:\x1b[0m<sp/>&quot;
                </highlight>
                <highlight class="normal">,<sp/>buf,<sp/>level_colors[level],<sp/>level_names[level]);
                </highlight>
            </codeline>
            <codeline lineno="126">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="127">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!L.date<sp/>&amp;&amp;<sp/>L.specs)
                </highlight>
            </codeline>
            <codeline lineno="128">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="129">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>fprintf(stderr,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;%s%-5s\x1b[0m<sp/>\x1b[90m%s:%d:\x1b[0m<sp/>&quot;
                </highlight>
                <highlight class="normal">,<sp/>level_colors[level],<sp/>level_names[level],<sp/>file,<sp/>line);
                </highlight>
            </codeline>
            <codeline lineno="130">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="131">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!L.date<sp/>&amp;&amp;<sp/>!L.specs)
                </highlight>
            </codeline>
            <codeline lineno="132">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="133">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>fprintf(stderr,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;%s%-5s\x1b[0m<sp/>\x1b[90m:\x1b[0m<sp/>&quot;
                </highlight>
                <highlight class="normal">,<sp/>level_colors[level],<sp/>level_names[level]);
                </highlight>
            </codeline>
            <codeline lineno="134">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="135">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#else</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="136">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(L.date<sp/>&amp;&amp;<sp/>L.specs)
                </highlight>
            </codeline>
            <codeline lineno="137">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="138">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>fprintf(stderr,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;%s<sp/>%-5s<sp/>%s:%d:<sp/>&quot;
                </highlight>
                <highlight class="normal">,<sp/>buf,<sp/>level_names[level],<sp/>file,<sp/>line);
                </highlight>
            </codeline>
            <codeline lineno="139">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="140">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(L.date<sp/>&amp;&amp;<sp/>!L.specs)
                </highlight>
            </codeline>
            <codeline lineno="141">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="142">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>fprintf(stderr,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;%s<sp/>%-5s:<sp/>&quot;
                </highlight>
                <highlight class="normal">,<sp/>buf,<sp/>level_names[level]);
                </highlight>
            </codeline>
            <codeline lineno="143">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="144">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!L.date<sp/>&amp;&amp;<sp/>L.specs)
                </highlight>
            </codeline>
            <codeline lineno="145">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="146">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>fprintf(stderr,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;%-5s<sp/>%s:%d:<sp/>&quot;
                </highlight>
                <highlight class="normal">,<sp/>level_names[level],<sp/>file,<sp/>line);
                </highlight>
            </codeline>
            <codeline lineno="147">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="148">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!L.date<sp/>&amp;&amp;<sp/>!L.specs)
                </highlight>
            </codeline>
            <codeline lineno="149">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="150">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>fprintf(stderr,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;%-5s:<sp/>&quot;
                </highlight>
                <highlight class="normal">,<sp/>level_names[level]);
                </highlight>
            </codeline>
            <codeline lineno="151">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="152">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="153">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>va_start(args,<sp/>fmt);
                </highlight>
            </codeline>
            <codeline lineno="154">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>vfprintf(stderr,<sp/>fmt,<sp/>args);
                </highlight>
            </codeline>
            <codeline lineno="155">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>va_end(args);
                </highlight>
            </codeline>
            <codeline lineno="156">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>fprintf(stderr,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\n&quot;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="157">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>fflush(stderr);
                </highlight>
            </codeline>
            <codeline lineno="158">
                <highlight class="normal">
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="159">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="160">
                <highlight class="normal">file:</highlight>
            </codeline>
            <codeline lineno="161">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">/*<sp/>Log<sp/>to<sp/>file<sp/>*/
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="162">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(L.fp)
                </highlight>
            </codeline>
            <codeline lineno="163">
                <highlight class="normal">
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="164">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>va_list<sp/>args;
                </highlight>
            </codeline>
            <codeline lineno="165">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="normal"><sp/>buf[32];
                </highlight>
            </codeline>
            <codeline lineno="166">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>buf[strftime(buf,
                    <sp/>
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(buf),
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;%Y-%m-%d<sp/>%H:%M:%S&quot;
                </highlight>
                <highlight class="normal">,<sp/>lt)]<sp/>=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;\0&apos;</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="167">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>fprintf(L.fp,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;%s<sp/>%-5s<sp/>%s:%d:<sp/>&quot;
                </highlight>
                <highlight class="normal">,<sp/>buf,<sp/>level_names[level],<sp/>file,<sp/>line);
                </highlight>
            </codeline>
            <codeline lineno="168">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>va_start(args,<sp/>fmt);
                </highlight>
            </codeline>
            <codeline lineno="169">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>vfprintf(L.fp,<sp/>fmt,<sp/>args);
                </highlight>
            </codeline>
            <codeline lineno="170">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>va_end(args);
                </highlight>
            </codeline>
            <codeline lineno="171">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>fprintf(L.fp,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\n&quot;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="172">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>fflush(L.fp);
                </highlight>
            </codeline>
            <codeline lineno="173">
                <highlight class="normal">
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="174">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="175">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">/*<sp/>Release<sp/>lock<sp/>*/
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="176">
                <highlight class="normal">
                    <sp/>
                    <sp/>unlock();
                </highlight>
            </codeline>
            <codeline lineno="177">
                <highlight class="normal">}</highlight>
            </codeline>
        </programlisting>
        <location file="log/src/log.c"/>
    </compounddef>
</doxygen>
